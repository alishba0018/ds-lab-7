#include <iostream>
using namespace std;

int getMax(int arr[], int n) {
    int mx = arr[0];
    for (int i = 1; i < n; i++)
        if (arr[i] > mx)
            mx = arr[i];
    return mx;
}

void countSort(int arr[], int n, int exp) {
    int output[n];
    int count[10] = {0};

    for (int i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    for (int i = 0; i < n; i++)
        arr[i] = output[i];
}

void radixSort(int arr[], int n) {
    int m = getMax(arr, n);
    for (int exp = 1; m / exp > 0; exp *= 10)
        countSort(arr, n, exp);
}

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr1[10] = {170, 45, 75, 90, 802, 24, 2, 66, 11, 31};
    int arr2[10] = {15, 3, 9, 81, 42, 33, 56, 72, 29, 5};
    int combined[20];
    for (int i = 0; i < 10; i++){
        combined[i] = arr1[i];}
    for (int i = 0; i < 10; i++){
        combined[10 + i] = arr2[i];}
    int n = 20;
    int radixArr[20];
    for (int i = 0; i < n; i++){ radixArr[i] = combined[i];}
    radixSort(radixArr, n);
    cout << "Sorted array using Radix Sort: ";
    for (int i = 0; i < n; i++){
        cout << radixArr[i] << " ";}
    cout << endl << endl;
    int mergeArr[20];
    for (int i = 0; i < n; i++){ mergeArr[i] = combined[i];}
    mergeSort(mergeArr, 0, n - 1);
    cout << "Sorted array using Merge Sort: ";
    for (int i = 0; i < n; i++){
        cout << mergeArr[i] << " ";}
    cout << endl;
    return 0;
}
